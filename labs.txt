Лабораторная 1.1

1. Скачать и развернуть gcc (https://github.com/skeeto/w64devkit/releases)
2. Скачать и установить Dev-C++ (ver 5) (https://www.bloodshed.net/)
3. Подключить gcc к Dev-C++ и установить дополнительный параметр
компилятора -std=c23
4. Создать консольное приложение на языке С, написав внутри функции
main команду printf("Hello world!\n");

Лабораторная 1.2

1. Указать в перемнной окружения  PATH путь к папке bin gcc
C:\w64devkit\bin
2. Проверить доступность gcc в командной строке: gcc --version
3. Установить VSCode https://code.visualstudio.com/
4. Устновить C/C++ Extension Pack
5. Открыть папку с проектом в VSCode
6. Скомпилировать и запустить main.c создав задачу C++ (GDB)
(файл .vscode/tasks.json)
7. Добавтиь параметр "-std=c23", в аргументы задачи (args)

Лабораторная 2.1

1. Ввести температуру в градусах цельсия (вещественное число - %lf)
2. Перевести температуру в градусы фаренгейта по формуле tc * 9 / 5 + 32
3. Вывести температуру в градусах фаренгейта (%lf)
4. Вывести температуру в градусах фаренгейта с 3 знаками после запятой

Лабораторная 3.1
1. В функцию main() добавить три целочисленных переменных
2. Ввести значения этих переменных с клавиатуры
3. Найти максимальное значение и распечатать его

Лабораторная 4.1
1. Пользователь вводит своё имя
2. Ввести сообщение: Hello, Name! (если введенное имя не пустое)
или Hello, Stranger! (если введенное имя пустое)
Использовать: gets(char*)
#include <string.h>
strlen(char*)
3. Реализовать эту же задачу используя 1 if без else

Лабораторная работа 4.2
1. Пользователь вводит число ворон на ветке (целое от 0 до 9)
2. Программа выводит сообщение: На ветке 5 ворон
Надо вывести слово ворона в правильном падеже (определить с помощью switch)
3. Дополнить программу, чтобы она корректно определяла падеж слова "ворона" для любого числа.

Лабораторная работа 4.3
1. Написать программу решения квадратного уравнения
	ax^2 + bx + c = 0
	a!=0
	
	D = b*b-4*a*c;
	
	D < 0 no roots
	D == 0.0 x = -b/(2*a)
	D > 0 x1 = (-b+sqrt(D))/(2*a) x2 = (-b-sqrt(D))/(2*a)

	#include <math.h>

Лабораторная работа 4.4
1. Найти Наибольший Общий делитель двух целых (GCD) - алгоритм Евклида
	k1 >= k2
	k1 % k2 = k3 (если k3 == 0, то ответ k2)
	k2 % k3 = k4 (если k4 == 0, то ответ k3)

	НОД(1071, 462) == 21

Лабораторная работа 4.5
1. Распечатать таблицу ASCII 16x16

	0 1 2 3   ... F
0
1
2	   символ с кодом 32   
.
.
F

Лабораторная 5.1

1. Определить константу PI через макрос
2. Опрелить макрофункцию для нахождения длины окружности по радиусу
3. Определить макрофункцию для нахождения площадь круга по радиусу
4. Перенести созданные макросы в отдельный заголовочный файл, оформив его правильно

Лабораторная 6.1
1. Задан массив int n[] = {10, 15, 7, 3, 21, 1000, 18, 30, 14, 17};
2. Найти медианное значение в этом массиве
	Отсортировать массив (qsort или bubble sort)
	Если число элементов нечетное, то взять значение среднего элемента
	Если число элементов четное, взять среднее арифметическое двух элементов в середине.
3. Сделать ввод массива с клавиатуры (сначала количество, потом значения).

Лабораторная 6.2
1. Задан массив int n[] = {10, 15, 7, 3, 21, 1000, 18, 30, 14, 17};
2. Найти заданное значение методом половинного деления (не забыв отсортировать массив! O(log(n))).

Лабораторная 6.3
1. Задан массив с повторяющимися значенями
{18, 15, 17, 3, 21, 1000, 18, 30, 15, 17, 1000, 21, 18, 34, 12};
2. Реализовать программу, которая определяет, сколько различных чисел находится в массиве (уникальных значений).
3. Реализовать программу, которая сохраняет в новом массиве уникальные значения (различные числа) (DISTINCT)

Лабораторная 7.1
1. Реализовать функцию банковского округления (round, ceil, floor)

Лабораторная 7.2
1. Реализовать функцию mediana с переменным числом параметров, которая будет считать медианное значение (использовать алгоритм из Лабораторной 6.1)
2. Использовать
	va_list params;
	va_start(params, n);
	va_arg(params, int);
	va_end(params);

создав в начале VLA массив нужного размера.

Лабораторная 9.1
1. Создать функцию swap_u для обмена значениями двух переменных одного (произвольного типа)
	использовать void*
	использовать memcpy

Лабораторная 9.2
1. Задан массив int n[] = {10, 15, 7, 3, 21, 1000, 18, 30, 14, 17};
2. Реализовать функцию которая ищет в массиве максимум, минимум, среднее и медиану
3. Сделать так, чтобы массив не менялся после выполнения функции (копировать массив в динамически выделенную память).

Лабораторная 9.3
1. Сортировка одномерного массива с использованием функции qsort().
2. Выполнить сортировку одномерного массива так, чтобы  сначала шли все чётные числа по возрастанию, а затем нечётные по убыванию.

Лабораторная 10.1
1. Создать функцию, которая конкатенирует 2 строки в новую (выделяя в динамической памяти место под новую строку)

Лабораторная 11.1
1. Написать программу, которая читает текстовый файл (построчно) и выводит статистику: количество строк, символов и слов в этом файле

Лабораторная 11.2
1. Прочитать строки из текстового файла в массив
2. Отсортировать их в памяти
3. Записать отсортированные строки в другой файл

Лабораторная 12
1. Создать структуру Book
	title
	price
	
2. Создать функции
	printBook(const Book*) - печать книги
	inputBook (create in heap) - ввод название и цены ()
	добавлять в массив Book*
	сортировать по названию (или цене)

	осовбодить память




























